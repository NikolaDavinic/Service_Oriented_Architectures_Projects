// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/log.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NetworkSpace {
  public static partial class Log
  {
    static readonly string __ServiceName = "log.Log";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NetworkSpace.EmptyMessage> __Marshaller_log_EmptyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NetworkSpace.EmptyMessage.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NetworkSpace.LogValues> __Marshaller_log_LogValues = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NetworkSpace.LogValues.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NetworkSpace.LogId> __Marshaller_log_LogId = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NetworkSpace.LogId.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NetworkSpace.EmptyMessage, global::NetworkSpace.LogValues> __Method_GetAllLogs = new grpc::Method<global::NetworkSpace.EmptyMessage, global::NetworkSpace.LogValues>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllLogs",
        __Marshaller_log_EmptyMessage,
        __Marshaller_log_LogValues);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NetworkSpace.LogId, global::NetworkSpace.LogValues> __Method_GetLogById = new grpc::Method<global::NetworkSpace.LogId, global::NetworkSpace.LogValues>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLogById",
        __Marshaller_log_LogId,
        __Marshaller_log_LogValues);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NetworkSpace.LogValues, global::NetworkSpace.LogValues> __Method_AddLog = new grpc::Method<global::NetworkSpace.LogValues, global::NetworkSpace.LogValues>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddLog",
        __Marshaller_log_LogValues,
        __Marshaller_log_LogValues);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NetworkSpace.LogValues, global::NetworkSpace.LogValues> __Method_UpdateLog = new grpc::Method<global::NetworkSpace.LogValues, global::NetworkSpace.LogValues>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateLog",
        __Marshaller_log_LogValues,
        __Marshaller_log_LogValues);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NetworkSpace.LogId, global::NetworkSpace.EmptyMessage> __Method_DeleteLog = new grpc::Method<global::NetworkSpace.LogId, global::NetworkSpace.EmptyMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLog",
        __Marshaller_log_LogId,
        __Marshaller_log_EmptyMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NetworkSpace.LogReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Log</summary>
    [grpc::BindServiceMethod(typeof(Log), "BindService")]
    public abstract partial class LogBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetAllLogs(global::NetworkSpace.EmptyMessage request, grpc::IServerStreamWriter<global::NetworkSpace.LogValues> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NetworkSpace.LogValues> GetLogById(global::NetworkSpace.LogId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NetworkSpace.LogValues> AddLog(global::NetworkSpace.LogValues request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NetworkSpace.LogValues> UpdateLog(global::NetworkSpace.LogValues request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NetworkSpace.EmptyMessage> DeleteLog(global::NetworkSpace.LogId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(LogBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllLogs, serviceImpl.GetAllLogs)
          .AddMethod(__Method_GetLogById, serviceImpl.GetLogById)
          .AddMethod(__Method_AddLog, serviceImpl.AddLog)
          .AddMethod(__Method_UpdateLog, serviceImpl.UpdateLog)
          .AddMethod(__Method_DeleteLog, serviceImpl.DeleteLog).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LogBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllLogs, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::NetworkSpace.EmptyMessage, global::NetworkSpace.LogValues>(serviceImpl.GetAllLogs));
      serviceBinder.AddMethod(__Method_GetLogById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkSpace.LogId, global::NetworkSpace.LogValues>(serviceImpl.GetLogById));
      serviceBinder.AddMethod(__Method_AddLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkSpace.LogValues, global::NetworkSpace.LogValues>(serviceImpl.AddLog));
      serviceBinder.AddMethod(__Method_UpdateLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkSpace.LogValues, global::NetworkSpace.LogValues>(serviceImpl.UpdateLog));
      serviceBinder.AddMethod(__Method_DeleteLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkSpace.LogId, global::NetworkSpace.EmptyMessage>(serviceImpl.DeleteLog));
    }

  }
}
#endregion
